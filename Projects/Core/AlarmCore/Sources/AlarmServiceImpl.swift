import Foundation
import SwiftUI
import UIKit
import AlarmKit
import CoreMotion
import AlarmCoreInterface
import AlarmDomainInterface
import Utility
import AppIntents

public final class AlarmServiceImpl: AlarmSchedulerService {

    private let alarmManager = AlarmManager.shared
    private let motionManager = CMMotionManager()

    private var cachedEntities: [UUID: AlarmEntity] = [:]
    private var cachedAlarms: [UUID: Alarm] = [:]
    private var cachedSchedules: [UUID: Alarm.Schedule] = [:]

    private var motionMonitorTask: Task<Void, Never>?
    private var alarmStateMonitorTask: Task<Void, Never>?
    private var motionDetectionCount: [UUID: Int] = [:]
    private let motionThreshold: Double = 2.0
    private let requiredMotionCount: Int = 3
    private var monitoringAlarmIds: Set<UUID> = []

    public init() {
        setupAppStateObserver()
        startAlarmStateMonitoring()
        setupAppIntentObserver()
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
        alarmStateMonitorTask?.cancel()
        motionMonitorTask?.cancel()
    }
    
    // MARK: - App State Observer
    private func setupAppStateObserver() {
        NotificationCenter.default.addObserver(
            forName: UIApplication.willEnterForegroundNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            print("üì± [AppState] Ïï±Ïù¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú ÏßÑÏûÖ")
            self?.refreshAlarmMonitoring()
        }
        
        NotificationCenter.default.addObserver(
            forName: UIApplication.didBecomeActiveNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            print("üì± [AppState] Ïï±Ïù¥ ÌôúÏÑ±ÌôîÎê®")
            self?.refreshAlarmMonitoring()
        }
    }
    
    private func refreshAlarmMonitoring() {
        // ÏïåÎûå ÏÉÅÌÉúÎ•º Ï¶âÏãú ÌôïÏù∏
        Task { [weak self] in
            guard let self = self else { return }
            do {
                let alarms = try await alarmManager.alarms
                
                for alarm in alarms {
                    if alarm.state == .alerting {
                        if !monitoringAlarmIds.contains(alarm.id) {
                            monitoringAlarmIds.insert(alarm.id)
                            startMonitoringMotion(for: alarm.id)
                        }
                    }
                }
            } catch {
                print("‚ùå [AppState] ÏïåÎûå ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: \(error)")
            }
        }
    }

    // MARK: - schedule
    public func scheduleAlarm(_ alarm: AlarmEntity) async throws {
        print("üîî [AlarmKit] ========== ÏïåÎûå Ïä§ÏºÄÏ§ÑÎßÅ ÏãúÏûë ==========")
        print("   - ÏïåÎûå ID: \(alarm.id)")
        print("   - ÏãúÍ∞Ñ: \(alarm.time)")
        
        // Í∂åÌïú ÌôïÏù∏
        let authStatus = alarmManager.authorizationState
        print("üìã [AlarmKit] ÌòÑÏû¨ Í∂åÌïú ÏÉÅÌÉú: \(authStatus)")
        
        guard await checkAutorization() else {
            print("‚ùå [AlarmKit] Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§!")
            throw NSError(domain: "AlarmService", code: 1,
                          userInfo: [NSLocalizedDescriptionKey: "Authorization denied"])
        }
        
        print("‚úÖ [AlarmKit] Í∂åÌïú ÌôïÏù∏ ÏôÑÎ£å")

        // Ï∫êÏãú ÏóîÌã∞Ìã∞ Ï†ÄÏû• (toggle/updateÏóêÏÑú ÏÇ¨Ïö©)
        cachedEntities[alarm.id] = alarm

        // ÏãúÍ∞Ñ ÌååÏã±
        let comps = alarm.time.split(separator: ":").compactMap { Int($0) }
        guard comps.count == 2 else {
            throw NSError(domain: "AlarmService", code: 400,
                          userInfo: [NSLocalizedDescriptionKey: "Invalid time format"])
        }
        let hour = comps[0], minute = comps[1]

        let schedule: Alarm.Schedule
         if alarm.repeatDays.isEmpty {
            // Ïò§ÎäòÏùò ÏïåÎûå ÏãúÍ∞Ñ Í≥ÑÏÇ∞
            var todayComponents = Calendar.current.dateComponents([.year, .month, .day], from: .now)
            todayComponents.hour = hour
            todayComponents.minute = minute
            todayComponents.second = 0
            
            guard let todayAlarmDate = Calendar.current.date(from: todayComponents) else {
                throw NSError(domain: "AlarmService", code: 401, userInfo: nil)
            }
            
            // Ïò§Îäò ÏïåÎûå ÏãúÍ∞ÑÏù¥ Ïù¥ÎØ∏ ÏßÄÎÇ¨ÏúºÎ©¥ ÎÇ¥ÏùºÎ°ú ÏÑ§Ï†ï, ÏïÑÎãàÎ©¥ Ïò§ÎäòÎ°ú ÏÑ§Ï†ï
            let alarmDate = todayAlarmDate > Date.now ? todayAlarmDate : Calendar.current.date(byAdding: .day, value: 1, to: todayAlarmDate) ?? todayAlarmDate
            
            schedule = .fixed(alarmDate)
         } else {
            print("üîî [AlarmKit] Î∞òÎ≥µ ÏïåÎûå ÏÑ§Ï†ï ÏãúÏûë")
            print("   - ÏûÖÎ†• ÏöîÏùº: \(alarm.repeatDays) (0=Ïùº, 1=Ïõî, ..., 6=ÌÜ†)")
            
            let weekdays = alarm.repeatDays.compactMap { day -> Locale.Weekday? in
                let calendarWeekday = day + 1  // 0->1(Ïùº), 1->2(Ïõî), ..., 6->7(ÌÜ†)
                print("   üîÑ ÏöîÏùº Î≥ÄÌôò ÏãúÎèÑ: \(day) -> Calendar weekday \(calendarWeekday)")
                
                let localeWeekday: Locale.Weekday?
                
                localeWeekday = Weekday(rawValue: calendarWeekday)?.localeWeekday ?? nil

                guard let finalWeekday = localeWeekday else { return nil }
                
                print("   ‚úÖ Locale.Weekday Î≥ÄÌôò ÏÑ±Í≥µ: \(finalWeekday)")
                return finalWeekday
            }
            
            print("   üìä ÏµúÏ¢Ö Î≥ÄÌôò Í≤∞Í≥º: \(weekdays.count)Í∞ú ÏöîÏùº")
            
             guard !weekdays.isEmpty else {
                print("‚ùå [AlarmKit] ÏöîÏùº Î≥ÄÌôò Ïã§Ìå®: Îπà Î∞∞Ïó¥")
                throw NSError(domain: "AlarmService", code: 402, 
                              userInfo: [NSLocalizedDescriptionKey: "Invalid repeat days"])
            }
            
            print("‚úÖ [AlarmKit] ÏöîÏùº Î≥ÄÌôò ÏôÑÎ£å: \(weekdays)")
            
            let relTime = Alarm.Schedule.Relative.Time(hour: hour, minute: minute)
            let recurrence = Alarm.Schedule.Relative.Recurrence.weekly(weekdays)
            schedule = .relative(.init(time: relTime, repeats: recurrence))
        }

        let alarmLabel = LocalizedStringResource(stringLiteral: alarm.label ?? "Alarm")
        
        let alert = AlarmPresentation.Alert(
            title: alarmLabel,
            stopButton: .stopButton,
            secondaryButton: .openAppButton,
            secondaryButtonBehavior: .custom
        )
        let presentation = AlarmPresentation(alert: alert)
        
        let metadata = AlarmData(alarmId: alarm.id)
        let attributes = AlarmAttributes<AlarmData>(
            presentation: presentation,
            metadata: metadata,
            tintColor: Color.accentColor
        )
        
        let stopIntent = StopAlarmIntent(alarmID: alarm.id.uuidString)
        let secondaryIntent = OpenAlarmAppIntent(alarmID: alarm.id.uuidString)
        let configuration = AlarmManager.AlarmConfiguration<AlarmData>(
            schedule: schedule,
            attributes: attributes,
            stopIntent: stopIntent,
            secondaryIntent: secondaryIntent
        )

        do {
            try await alarmManager.schedule(id: alarm.id, configuration: configuration)
        } catch {
            print("‚ùå [AlarmKit] alarmManager.schedule() Ïã§Ìå®: \(error)")
            throw error
        }

        cachedSchedules[alarm.id] = schedule
        
        do {
            let registeredAlarms = try alarmManager.alarms
            if let registeredAlarm = registeredAlarms.first(where: { $0.id == alarm.id }) {
                cachedAlarms[alarm.id] = registeredAlarm
            } else {
                print("‚ö†Ô∏è [AlarmKit] Í≤ΩÍ≥†: ÏïåÎûåÏù¥ Îì±Î°ùÎêòÏßÄ ÏïäÏùå!")
            }
        } catch {
            print("‚ö†Ô∏è [AlarmKit] ÏïåÎûå Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®: \(error)")
        }
        
        print("‚úÖ [AlarmKit] ÏïåÎûå Ïä§ÏºÄÏ§Ñ ÏôÑÎ£å: \(alarm.id)")
        print("   - ÏãúÍ∞Ñ: \(alarm.time)")
        print("   - Î†àÏù¥Î∏î: \(alarm.label ?? "ÏïåÎûå")")
        if alarm.repeatDays.isEmpty {
            print("   - Î∞òÎ≥µ: ÏóÜÏùå (ÏùºÌöåÏÑ± ÏïåÎûå)")
        } else {
            let dayNames = ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"]
            let dayString = alarm.repeatDays.sorted().map { dayNames[$0] }.joined(separator: ", ")
            print("   - Î∞òÎ≥µ: \(dayString)")
        }
        print("   - ÌôúÏÑ±Ìôî: \(alarm.isEnabled)")
    }

    // MARK: - cancel
    public func cancelAlarm(_ alarmId: UUID) async throws {
        try await alarmManager.cancel(id: alarmId)
        cachedEntities.removeValue(forKey: alarmId)
        cachedSchedules.removeValue(forKey: alarmId)
        cachedAlarms.removeValue(forKey: alarmId)
        // AlarmKitÏù¥ ÏãúÏä§ÌÖú ÏïåÎûåÏúºÎ°ú ÏÇ¨Ïö¥ÎìúÎ•º Í¥ÄÎ¶¨ÌïòÎØÄÎ°ú Ïö∞Î¶¨Îäî ÏïÑÎ¨¥Í≤ÉÎèÑ ÌïòÏßÄ ÏïäÏùå
    }

    // MARK: - update
    public func updateAlarm(_ alarm: AlarmEntity) async throws {
        try await cancelAlarm(alarm.id)
        try await scheduleAlarm(alarm)
    }
    
    // MARK: - toggle
    public func toggleAlarm(_ alarmId: UUID, isEnabled: Bool) async throws {
        if isEnabled {
            // ÏºúÍ∏∞: ÎèÑÎ©îÏù∏ ÏóîÌã∞Ìã∞ ÏûàÏñ¥Ïïº Ïû¨Ïä§ÏºÄÏ§ÑÎßÅ Í∞ÄÎä•
            guard let entity = cachedEntities[alarmId] else {
                // ÏóÜÎã§Î©¥ Ïï± DB(SwiftData/Supabase)ÏóêÏÑú Î∂àÎü¨ÏôÄÏïº Ìï®
                throw NSError(domain: "AlarmService", code: 404, userInfo: [NSLocalizedDescriptionKey: "Entity not found; load from DB first"])
            }
            try await scheduleAlarm(entity) // scheduleAlarmÏù¥ Ï∫êÏãúÏóê Ï†ÄÏû•Ìï®
        } else {
            try await cancelAlarm(alarmId)
        }
    }
    
    // MARK: - status
    public func getAlarmStatus(alarmId: UUID) async throws -> AlarmStatus? {
        let alarms = try alarmManager.alarms
        guard let ak = alarms.first(where: { $0.id == alarmId }) else { return nil }
        switch ak.state {
        case .scheduled: return .scheduled
        case .countdown: return .scheduled
        case .paused: return .paused
        case .alerting: return .alerting
        @unknown default: return .unknown
        }
    }

    // MARK: - AppIntent Observer
    private func setupAppIntentObserver() {
        // ÏïåÎûåÏù¥ Ïö∏Î¶¥ Îïå Ïã§ÌñâÎêòÎäî Intent ÏïåÎ¶º
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("AlarmTriggered"),
            object: nil,
            queue: .main
        ) { [weak self] notification in
            guard let self = self,
                  let userInfo = notification.userInfo,
                  let alarmId = userInfo["alarmId"] as? UUID else {
                return
            }
            
            print("üîî [AppIntent] ÏïåÎûå IntentÎ°úÎ∂ÄÌÑ∞ ÏïåÎ¶º ÏàòÏã†: \(alarmId)")
            
            // Î™®ÏÖò Í∞êÏßÄ ÏãúÏûë
            if !self.monitoringAlarmIds.contains(alarmId) {
                self.monitoringAlarmIds.insert(alarmId)
                self.startMonitoringMotion(for: alarmId)
            }
        }
        
        // ÏïåÎûåÏù¥ Î©àÏ∂ú Îïå Ïã§ÌñâÎêòÎäî Intent ÏïåÎ¶º (stopIntent)
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("AlarmStopped"),
            object: nil,
            queue: .main
        ) { [weak self] notification in
            guard let self = self,
                  let userInfo = notification.userInfo,
                  let alarmId = userInfo["alarmId"] as? UUID else {
                return
            }
            
            print("üîï [AppIntent] ÏïåÎûå Î©àÏ∂§ IntentÎ°úÎ∂ÄÌÑ∞ ÏïåÎ¶º ÏàòÏã†: \(alarmId)")
            
            // Î™®ÏÖò Í∞êÏßÄ Ï§ëÏßÄ
            if self.monitoringAlarmIds.contains(alarmId) {
                self.monitoringAlarmIds.remove(alarmId)
                self.stopMonitoringMotion(for: alarmId)
            }
        }
    }
    
    // MARK: - alarm state monitoring
    private func startAlarmStateMonitoring() {
        // AlarmKitÏùò alarmUpdatesÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏïåÎûå ÏÉÅÌÉú Î≥ÄÍ≤ΩÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞êÏßÄ
        // Ïù¥Í≤ÉÏùÄ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑúÎèÑ ÏûëÎèôÌï©ÎãàÎã§ (ÏãúÏä§ÌÖú ÏïåÎûåÏù¥ÎØÄÎ°ú)
        alarmStateMonitorTask = Task { [weak self] in
            guard let self = self else { return }
            
            // alarmUpdatesÎ•º ÌÜµÌï¥ ÏïåÎûå ÏÉÅÌÉú Î≥ÄÍ≤ΩÏùÑ Íµ¨ÎèÖ (Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑúÎèÑ ÏûëÎèô)
            for await alarms in alarmManager.alarmUpdates {
                await self.handleAlarmUpdates(alarms)
            }
        }
        
        // Ï¥àÍ∏∞ ÏïåÎûå ÏÉÅÌÉú Î°úÎìú
        Task { [weak self] in
            guard let self = self else { return }
            do {
                let alarms = try await alarmManager.alarms
                await self.handleAlarmUpdates(alarms)
            } catch {
                print("‚ö†Ô∏è [AlarmKit] Ï¥àÍ∏∞ ÏïåÎûå ÏÉÅÌÉú Î°úÎìú Ïã§Ìå®: \(error)")
            }
        }
    }
    
    @MainActor
    private func handleAlarmUpdates(_ alarms: [Alarm]) {
        // ÏïåÎûåÏù¥ Ïö∏Î¶¨Îäî Ï§ëÏù∏ÏßÄ ÌôïÏù∏
        for alarm in alarms {
            if alarm.state == .alerting {
                // ÏïåÎûåÏù¥ Ïö∏Î¶¨Îäî Ï§ëÏù¥Î©¥ Î™®ÏÖò Í∞êÏßÄ ÏãúÏûë
                if !monitoringAlarmIds.contains(alarm.id) {
                    print("üîî [AlarmKit] ÏïåÎûåÏù¥ Ïö∏Î¶¨Í≥† ÏûàÏäµÎãàÎã§! Î™®ÏÖò Í∞êÏßÄ ÏãúÏûë: \(alarm.id)")
                    print("   - ÏÉÅÌÉú: \(alarm.state)")
                    print("   - ÌòÑÏû¨ ÏãúÍ∞Ñ: \(Date())")
                    
                    monitoringAlarmIds.insert(alarm.id)
                    startMonitoringMotion(for: alarm.id)
                    
                    // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú AppIntent Ïã§Ìñâ ÏãúÎèÑ (iOS 18+)
                    if #available(iOS 18.0, *) {
                        Task {
                            do {
                                let intent = AlarmAppIntent(alarmId: alarm.id)
                                _ = try await intent.perform()
                                print("‚úÖ [AppIntent] ÏïåÎûå Intent Ïã§Ìñâ ÏÑ±Í≥µ: \(alarm.id)")
                            } catch {
                                print("‚ö†Ô∏è [AppIntent] ÏïåÎûå Intent Ïã§Ìñâ Ïã§Ìå®: \(error)")
                                // AppIntent Ïã§Ìñâ Ïã§Ìå®Ìï¥ÎèÑ Î™®ÏÖò Í∞êÏßÄÎäî Ïù¥ÎØ∏ ÏãúÏûëÎêòÏóàÏúºÎØÄÎ°ú Î¨∏Ï†úÏóÜÏùå
                            }
                        }
                    }
                    
                    // AlarmKitÏù¥ ÏãúÏä§ÌÖú ÏïåÎûåÏúºÎ°ú ÏÇ¨Ïö¥ÎìúÎ•º ÏûêÎèô Ïû¨ÏÉùÌïòÎØÄÎ°ú Ïö∞Î¶¨Îäî Î™®ÏÖò Í∞êÏßÄÎßå Ìï®
                }
            } else {
                // ÏïåÎûåÏù¥ Í∫ºÏ°åÏúºÎ©¥ Î™®ÏÖò Í∞êÏßÄ Ï§ëÏßÄ
                if monitoringAlarmIds.contains(alarm.id) {
                    print("üîï [AlarmKit] ÏïåÎûåÏù¥ Í∫ºÏ°åÏäµÎãàÎã§. Î™®ÏÖò Í∞êÏßÄ Ï§ëÏßÄ: \(alarm.id)")
                    monitoringAlarmIds.remove(alarm.id)
                    stopMonitoringMotion(for: alarm.id)
                    // AlarmKitÏù¥ ÏãúÏä§ÌÖú ÏïåÎûåÏúºÎ°ú ÏÇ¨Ïö¥ÎìúÎ•º Í¥ÄÎ¶¨ÌïòÎØÄÎ°ú Ïö∞Î¶¨Îäî ÏïÑÎ¨¥Í≤ÉÎèÑ ÌïòÏßÄ ÏïäÏùå
                }
            }
        }
        
        // Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù∏ ÏïåÎûåÏù¥ ÏÇ¨ÎùºÏ°åÎäîÏßÄ ÌôïÏù∏
        let activeAlarmIds = Set(alarms.map { $0.id })
        let removedIds = monitoringAlarmIds.subtracting(activeAlarmIds)
        for id in removedIds {
            print("üîï [AlarmKit] ÏïåÎûåÏù¥ Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§. Î™®ÏÖò Í∞êÏßÄ Ï§ëÏßÄ: \(id)")
            monitoringAlarmIds.remove(id)
            stopMonitoringMotion(for: id)
            // AlarmKitÏù¥ ÏãúÏä§ÌÖú ÏïåÎûåÏúºÎ°ú ÏÇ¨Ïö¥ÎìúÎ•º Í¥ÄÎ¶¨ÌïòÎØÄÎ°ú Ïö∞Î¶¨Îäî ÏïÑÎ¨¥Í≤ÉÎèÑ ÌïòÏßÄ ÏïäÏùå
        }
    }

    // MARK: - motion detection (use handler approach)
    public func startMonitoringMotion(for executionId: UUID) {
        guard motionManager.isAccelerometerAvailable else {
            print("‚ö†Ô∏è [Motion] Í∞ÄÏÜçÎèÑÍ≥ÑÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§")
            return
        }
        
        // Ïù¥ÎØ∏ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù¥Î©¥ Ï§ëÏßÄ ÌõÑ Ïû¨ÏãúÏûë
        if motionManager.isAccelerometerActive {
            motionManager.stopAccelerometerUpdates()
        }
        
        motionDetectionCount[executionId] = 0
        motionManager.accelerometerUpdateInterval = 0.2

        print("üì± [Motion] Î™®ÏÖò Í∞êÏßÄ ÏãúÏûë: \(executionId)")
        
        // start with handler on main queue
        motionManager.startAccelerometerUpdates(to: .main) { [weak self] data, error in
            guard let self = self else { return }
            
            if let error = error {
                print("‚ùå [Motion] Í∞ÄÏÜçÎèÑÍ≥Ñ Ïò§Î•ò: \(error)")
                return
            }
            
            guard let d = data else { return }
            
            // Ï§ëÎ†• Ï†úÍ±∞ Î∞è Í∞ÄÏÜçÎèÑ Í≥ÑÏÇ∞
            let accel = sqrt(d.acceleration.x * d.acceleration.x +
                             d.acceleration.y * d.acceleration.y +
                             d.acceleration.z * d.acceleration.z)
            let net = abs(accel - 1.0)
            
            if net > self.motionThreshold {
                let c = (self.motionDetectionCount[executionId] ?? 0) + 1
                self.motionDetectionCount[executionId] = c
                
                print("üì± [Motion] ÌùîÎì§Î¶º Í∞êÏßÄ: \(c)/\(self.requiredMotionCount) (Í∞ÄÏÜçÎèÑ: \(String(format: "%.2f", net)))")
                
                if c >= self.requiredMotionCount {
                    print("‚úÖ [Motion] Ï∂©Î∂ÑÌïú ÌùîÎì§Î¶º Í∞êÏßÄ! ÏïåÎûå ÎÅÑÍ∏∞: \(executionId)")
                    Task {
                        do {
                            try await self.cancelAlarm(executionId)
                            print("‚úÖ [Motion] ÏïåÎûå Ï¢ÖÎ£å ÏÑ±Í≥µ")
                        } catch {
                            print("‚ùå [Motion] ÏïåÎûå Ï¢ÖÎ£å Ïã§Ìå®: \(error)")
                        }
                    }
                    self.stopMonitoringMotion(for: executionId)
                }
            }
        }
    }
    
    public func stopMonitoringMotion(for executionId: UUID) {
        if motionDetectionCount[executionId] != nil {
            print("üîï [Motion] Î™®ÏÖò Í∞êÏßÄ Ï§ëÏßÄ: \(executionId)")
            motionDetectionCount.removeValue(forKey: executionId)
            
            // Îã§Î•∏ ÏïåÎûåÏù¥ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù¥ ÏïÑÎãàÎ©¥ Í∞ÄÏÜçÎèÑÍ≥Ñ Ï§ëÏßÄ
            if motionDetectionCount.isEmpty {
                motionManager.stopAccelerometerUpdates()
                print("üîï [Motion] Í∞ÄÏÜçÎèÑÍ≥Ñ ÏôÑÏ†Ñ Ï§ëÏßÄ")
            }
        }
    }

    // AlarmKitÏù¥ ÏãúÏä§ÌÖú ÏïåÎûåÏúºÎ°ú ÏÇ¨Ïö¥ÎìúÎ•º ÏûêÎèô Ïû¨ÏÉùÌïòÎØÄÎ°ú
    // Ïö∞Î¶¨Îäî Ïò§ÎîîÏò§ Ïû¨ÏÉù ÏΩîÎìúÍ∞Ä ÌïÑÏöî ÏóÜÏäµÎãàÎã§

    // MARK: - helpers
    private func checkAutorization() async -> Bool {
        switch alarmManager.authorizationState {
        case .notDetermined:
            do {
                let s = try await alarmManager.requestAuthorization()
                return s == .authorized
            } catch { return false }
        case .authorized: return true
        case .denied: return false
        @unknown default: return false
        }
    }
}
